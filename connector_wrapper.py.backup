"""
FastAPI wrapper to expose Word MCP tools as REST endpoints for Copilot Studio.
Converts REST API calls to internal MCP tool calls.
"""

import os
import json
from fastapi import FastAPI, HTTPException, Query, Body, Header, Depends
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# Import MCP tools
from word_document_server.tools import (
    document_tools,
    content_tools,
    template_tools,
    advanced_replace_tools
)

load_dotenv()

app = FastAPI(
    title="Word Document MCP Connector",
    description="REST API wrapper for Word MCP Server - Compatible with Copilot Studio",
    version="1.0"
)

# API Key validation
API_KEY = os.getenv("API_KEY", "")

def validate_api_key(
    x_api_key: Optional[str] = Header(None, alias="X-API-Key"),
    code: Optional[str] = Query(None)
):
    """Validate API key from header (X-API-Key) or query parameter (code)."""
    if not API_KEY:
        return True  # No API key configured, allow all requests

    # Accept API key from header (Power Apps) or query param (other clients)
    provided_key = x_api_key or code

    if not provided_key:
        raise HTTPException(
            status_code=401,
            detail="Unauthorized: Missing API key. Provide X-API-Key header or code query parameter."
        )

    if provided_key != API_KEY:
        raise HTTPException(status_code=401, detail="Unauthorized: Invalid API key")

    return True


# Request models
class CreateFromTemplateRequest(BaseModel):
    template_name: str
    new_document_name: str
    commercialName: Optional[str] = None
    commercialEmail: Optional[str] = None
    commercialTel: Optional[str] = None
    propalContent: Optional[str] = None


class ReplaceTextRequest(BaseModel):
    filename: str
    find_text: str
    replace_text: str


class AddParagraphRequest(BaseModel):
    filename: str
    text: str
    style: Optional[str] = None


class AddHeadingRequest(BaseModel):
    filename: str
    text: str
    level: Optional[int] = 1


class AddTableRequest(BaseModel):
    filename: str
    rows: int
    cols: int
    data: Optional[str] = None  # JSON string


class GetDocumentTextRequest(BaseModel):
    filename: str


class GetDocumentInfoRequest(BaseModel):
    filename: str


class CreateDocumentRequest(BaseModel):
    filename: str
    title: Optional[str] = None
    author: Optional[str] = None


# Endpoints
@app.get("/api/templates/list")
async def list_templates(auth: bool = Depends(validate_api_key)):
    """List all available templates."""
    try:
        result = await template_tools.list_document_templates("")
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/documents/list")
async def list_documents(auth: bool = Depends(validate_api_key)):
    """List all documents in storage."""
    try:
        result = await document_tools.list_available_documents(".")
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/template/create")
async def create_from_template(
    request: CreateFromTemplateRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Create a document from template with variable substitution."""
    try:
        # Build variables dict
        variables = {}
        if request.commercialName:
            variables["commercialName"] = request.commercialName
        if request.commercialEmail:
            variables["commercialEmail"] = request.commercialEmail
        if request.commercialTel:
            variables["commercialTel"] = request.commercialTel
        if request.propalContent:
            variables["propalContent"] = request.propalContent

        # Call MCP tool
        result = await template_tools.create_document_from_template(
            template_name=request.template_name,
            new_document_name=request.new_document_name,
            variables=variables if variables else None,
            category="general"
        )

        # Extract URL from result if present
        doc_url = ""
        if "URL:" in result or "url:" in result.lower():
            lines = result.split("\n")
            for line in lines:
                if "url:" in line.lower():
                    doc_url = line.split(":", 1)[1].strip()
                    break

        return JSONResponse(content={
            "message": result,
            "document_url": doc_url
        })
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/text/replace")
async def replace_text(
    request: ReplaceTextRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Replace all occurrences of text in a document."""
    try:
        result = await advanced_replace_tools.replace_text_universal(
            filename=request.filename,
            find_text=request.find_text,
            replace_text=request.replace_text
        )
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/paragraph/add")
async def add_paragraph(
    request: AddParagraphRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Add a paragraph to a document."""
    try:
        result = await content_tools.add_paragraph(
            filename=request.filename,
            text=request.text,
            style=request.style
        )
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/heading/add")
async def add_heading(
    request: AddHeadingRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Add a heading to a document."""
    try:
        result = await content_tools.add_heading(
            filename=request.filename,
            text=request.text,
            level=request.level
        )
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/table/add")
async def add_table(
    request: AddTableRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Add a table to a document."""
    try:
        # Parse data if provided
        data = None
        if request.data:
            try:
                data = json.loads(request.data)
            except json.JSONDecodeError:
                pass

        result = await content_tools.add_table(
            filename=request.filename,
            rows=request.rows,
            cols=request.cols,
            data=data
        )
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/text/get")
async def get_document_text(
    request: GetDocumentTextRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Extract all text from a document."""
    try:
        result = await document_tools.get_document_text(filename=request.filename)
        return JSONResponse(content={"text": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/info/get")
async def get_document_info(
    request: GetDocumentInfoRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Get document information and metadata."""
    try:
        result = await document_tools.get_document_info(filename=request.filename)
        return JSONResponse(content={"info": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/document/create")
async def create_document(
    request: CreateDocumentRequest = Body(...),
    auth: bool = Depends(validate_api_key)
):
    """Create a new blank document."""
    try:
        result = await document_tools.create_document(
            filename=request.filename,
            title=request.title,
            author=request.author
        )
        return JSONResponse(content={"result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/")
async def root():
    """Root endpoint - connector info."""
    return {
        "name": "Word Document MCP Connector",
        "version": "1.0",
        "description": "REST API wrapper for Copilot Studio integration",
        "swagger": "/openapi.json"
    }


if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=port)
